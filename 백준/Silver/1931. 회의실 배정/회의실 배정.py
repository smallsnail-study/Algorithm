# https://www.acmicpc.net/problem/1931

# 문제:
# 한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다.
# 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 **최대 개수**를 찾아보자.
# 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다.
# 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.
# 첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다.
# 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데
# 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다.
# 시작 시간과 끝나는 시간은 2^{31}-1보다 작거나 같은 자연수 또는 0이다.
# 첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.

N = int(input()) # 회의 수
meet = [] # 회의정보를 담을 리스트

# O(N)
for i in range(N):
    start, end = map(int, input().split()) # 각 회의의 시작시간, 종료시간
    meet.append([start, end])

# 종료 시간이 빠른 순으로, 종료 시간이 같다면 시작 시간이 빠른 순으로 오름차순 리스트 정렬 O(N log N)
meet.sort(key=lambda x: (x[1], x[0]))

# 사용할 수 있는 회의의 최대 개수
answer = 0
# 마지막으로 선택한 회의의 종료 시간
endTime = 0

# 회의정보를 하나씩 확인하면서 반복 O(N)
for i in range(len(meet)):
    # 현재 회의의 시작시간이 마지막으로 선택한 회의의 종료시간보다 크거나 같으면
    if endTime <= meet[i][0]:
        # 현재 회의를 선택하고, 선택한 회의의 종료시간으로 endTime을 업데이트
        endTime = meet[i][1]
        # 회의 개수도 1증가시킨다
        answer += 1

print(answer)

# 시간복잡도 : O(N log N)